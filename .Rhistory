-carStorageType,
-carStorageTypeDscr,
-Ac,
-AcDscr,
-Heating,
-HeatingDscr,
-ExtWallPrim,
-ExtWallDscrPrim,
-ExtWallSec,
-ExtWallDscrSec,
-IntWall,
-IntWallDscr,
-Roof_Cover,
-Roof_CoverDscr,
# recoded
-qualityCodeDscr,
-builtYear
)
homeIDs <- dplyr::select(homeData, MUSA_ID)
# ADD CENSUS TRACTS
census_api_key("e79f3706b6d61249968c6ce88794f6f556e5bf3d", overwrite = FALSE)
year <- 2019
state <- 08
county <- 13
tracts <-
get_acs(geography = "tract",
variables = "B01001_001",
year = year,
state = state,
county = county,
geometry = TRUE,
output = 'wide') %>%
rename(totalPop = B01001_001E) %>% # Total population
dplyr::select(GEOID, geometry) %>%
st_transform(st_crs(boulderCRS))
tractData <- st_join(homeData, tracts) %>%
rename(tractID = GEOID)
# ADD CITY FROM COUNTY ZONING
countyZoning <- st_read('Zoning_-_Zoning_Districts.geojson') %>%
st_transform(st_crs(boulderCRS)) %>%
dplyr::select(ZONECLASS, ZONEDESC, geometry) %>%
mutate(
city = if_else(str_detect(ZONECLASS, "X"), as.character(ZONEDESC), "Unincorporated"),
)
cityData <- st_join(tractData, countyZoning) %>%
dplyr::select(-ZONECLASS, -ZONEDESC)
# ADD BOULDER SUBCOMMUNITIES
boulderSubcomms <- st_read('Subcommunities.geojson') %>%
st_transform(st_crs(boulderCRS)) %>%
dplyr::select(SUBCOMMUNITY, geometry)
zillowHoods <- st_read('ZillowNeighborhoodsBoulderCounty.geojson') %>%
st_transform(st_crs(boulderCRS)) %>%
dplyr::select(Name, geometry)
boulderSubcomms_join <- st_join(cityData, boulderSubcomms) %>%
mutate(
subcommunity = if_else(is.na(SUBCOMMUNITY), "None", as.character(SUBCOMMUNITY))
)
longmontHoods_join <- st_join(boulderSubcomms_join, zillowHoods) %>%
mutate(
zillowHood = if_else(is.na(Name), "None", as.character(Name)),
subcommunity = if_else(city == "Longmont", as.character(zillowHood), as.character(subcommunity))
)
subcommData <- longmontHoods_join %>%
dplyr::select(-SUBCOMMUNITY, -Name, -zillowHood)
# new data frame
finalData <- subcommData
# --- GENERATE PREDICTIONS ---
regData <- finalData
homes.training <- filter(regData, toPredict == 0)
homes.test <- filter(regData, toPredict == 1)
# estimate model on training set
reg.training <- lm(logPrice ~ .,
data = st_drop_geometry(regData) %>%
dplyr::select(-toPredict, -MUSA_ID, -price),
na.action = na.exclude
)
summary(reg.training)
# predict home prices
homes.test <- homes.test %>%
mutate(
logPrice.Predict = predict(reg.training, homes.test),
price = exp(logPrice.Predict)
)
# select submission columns
submission <- homes.test %>%
dplyr::select(MUSA_ID, price) %>%
st_drop_geometry()
# export to csv
write.csv(submission,"89ers.csv", row.names = TRUE)
# load libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(dummies)
library(spdep)
library(caret)
# library(ckanr) # TODO: Remove if not needed; used to read CKAN APIs
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot)
library(kableExtra)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
# avoid scientific notation
options(scipen = 999)
boulderCRS <- 'ESRI:102253' # NAD 1983 HARN StatePlane Colorado North FIPS 0501
data <- st_read("studentData.geojson") %>%
st_set_crs('ESRI:102254') %>%
st_transform(boulderCRS)
homeRecodes <- data %>%
mutate(
# calculate log of price to normalize positive skew
logPrice = log(price),
# recode missing construction material values
constMat = case_when(
ConstCode == 0 ~ "Missing",
ConstCode == 300 ~ "Unspecified",
ConstCode > 300 ~ as.character(ConstCodeDscr)
),
# recode missing basement values
basement = if_else(bsmtType == 0, "None", as.character(bsmtTypeDscr)),
# recode missing car storage values
carStorage = if_else(carStorageType == 0, "None", as.character(carStorageTypeDscr)),
# recode missing a/c values
acType = case_when(
is.na(Ac) ~ "None",
Ac == 200 ~ "Unspecified", # Code with no description
Ac >= 210 ~ as.character(AcDscr) # "Attic Fan", "Evaporative Cooler", "Whole House" unchanged
),
# recode missing heating values
heatingType = case_when(
is.na(Heating) ~ "None",
Heating == 800 ~ "Unspecified",
Heating > 800 ~ as.character(HeatingDscr)
),
# recode missing primary exterior wall values
extWall = if_else(ExtWallPrim == 0, "Missing", as.character(ExtWallDscrPrim)),
# recode missing secondary exterior wall values
extWall2 = if_else(is.na(ExtWallSec), "None", as.character(ExtWallDscrSec)),
# recode missing interior wall values
intWall = if_else(is.na(IntWall), "Missing", as.character(IntWallDscr)),
# recode missing roof cover values
roofType = if_else(is.na(Roof_Cover), "Missing", as.character(Roof_CoverDscr)),
# recode quality as numeric variable
# NOTE: not at all normal; maybe note in writeup if using
qualityNum = case_when(
qualityCode == 10 ~ 1, # QualityCodeDscr == "LOW "
qualityCode == 20 ~ 2, # "FAIR "
qualityCode == 30 ~ 3, # "AVERAGE "
qualityCode == 31 ~ 4, # "AVERAGE + "
qualityCode == 32 ~ 5, # "AVERAGE ++ "
qualityCode == 40 ~ 6, # "GOOD "
qualityCode == 41 ~ 7, # "GOOD + "
qualityCode == 42 ~ 8, # "GOOD ++ "
qualityCode == 50 ~ 9, # "VERY GOOD "
qualityCode == 51 ~ 10, # "VERY GOOD + "
qualityCode == 52 ~ 11, # "VERY GOOD ++ "
qualityCode == 60 ~ 12, # "EXCELLENT "
qualityCode == 61 ~ 13, # "EXCELLENT + "
qualityCode == 62 ~ 14, # "EXCELLENT++ "
qualityCode == 70 ~ 15, # "EXCEPTIONAL 1 "
qualityCode == 80 ~ 16, # "EXCEPTIONAL 2 "
),
# recode builtYear as builtEra
builtEra = case_when(
builtYear < 1910 ~ "Pre-1910",
between(builtYear, 1910, 1919) ~ "1910s",
between(builtYear, 1920, 1929) ~ "1920s",
between(builtYear, 1930, 1939) ~ "1930s",
between(builtYear, 1940, 1949) ~ "1940s",
between(builtYear, 1950, 1959) ~ "1950s",
between(builtYear, 1960, 1969) ~ "1960s",
between(builtYear, 1970, 1979) ~ "1970s",
between(builtYear, 1980, 1989) ~ "1980s",
between(builtYear, 1990, 1999) ~ "1990s",
between(builtYear, 2000, 2009) ~ "2000s",
between(builtYear, 2010, 2019) ~ "2010s",
builtYear >= 2020 ~ "2020s"
),
# recode section_num as manySections
manySections = if_else(section_num > 1, 1, 0)
)
homeData <- homeRecodes %>%
# exclude extreme outlier listed as sold for $31.5 million;
# listing strongly suggests incorrectly entered: https://www.zillow.com/homedetails/3335-Talisman-Ct-APT-C-Boulder-CO-80301/13222117_zpid/
filter(MUSA_ID != 8735) %>%
# drop unneeded columns
dplyr::select(
# same for all
-bldgClass,
-bldgClassDscr,
-status_cd,
# not needed
-saleDate,
-address,
# too much missing data
-Stories,
-UnitCount,
# cleaned
-designCode,
-qualityCode,
-ConstCode,
-ConstCodeDscr,
-bsmtType,
-bsmtTypeDscr,
-carStorageType,
-carStorageTypeDscr,
-Ac,
-AcDscr,
-Heating,
-HeatingDscr,
-ExtWallPrim,
-ExtWallDscrPrim,
-ExtWallSec,
-ExtWallDscrSec,
-IntWall,
-IntWallDscr,
-Roof_Cover,
-Roof_CoverDscr,
# recoded
-qualityCodeDscr,
-builtYear
)
data <- st_read("studentData.geojson") %>%
st_set_crs('ESRI:102254')
st_crs(data$geometry)
# ESRI:102254 /// EPSG 4152 in meters
data <- st_read("studentData.geojson") %>%
st_set_crs('ESRI:102254')
st_crs(data$geometry)
data <- st_read("studentData.geojson") %>%
st_set_crs('ESRI:102254')
wildfires <-
st_read('Wildfire_History.geojson')
library(stargazer)
install.packages("stargazer")
install.packages("basemaps")
install.packages("basemaps")
install.packages("basemaps")
install.packages("magick")
install.packages("magick")
install.packages("basemaps")
1578.07-664.96-428.49
-191.18
484.62-191.18
library(lubridate)
data("iris")
some_dates <-
data.frame(date = c(ymd_hms("2021-01-01 01:00:00"),
ymd_hms("2021-12-31 23:00:00")))
partial_panel <-
expand.grid(
date = unique(some_dates$date),
species = unique(iris$Species)
)
all_dates <- data.frame()
all_dates <-
data.frame(date = seq.POSIXt(min(some_dates$date),
max(some_dates$date),
by = "hour"))
full_panel <-
expand.grid(
date = all_dates$date,
species = unique(iris$Species)
)
some_dates
partial_panel
head(all_dates)
tail(all_dates)
glimpse(all_dates)
full_panel
all_dates
all_dates
all_dates
rstudioapi::writeRStudioPreference("console_max_lines", 1100)
rstudioapi::writeRStudioPreference("console_max_lines", as.integer(1100))
all_dates
rstudioapi::writeRStudioPreference("console_max_lines", 1000)
rstudioapi::writeRStudioPreference("console_max_lines", as.integer(2000))
all_dates
head(all_dates)
full_panel
iris
head(iris)
full_panel_2 <-
expand.grid(
date = seq.POSIXt(
min(some_dates$date),
max(some_dates$date),
by = "hour"
),
species = unique(iris$Species)
)
full_panel_2 <-
expand.grid(
date = seq.POSIXt(min(some_dates$date),
max(some_dates$date),
by = "hour"),
species = unique(iris$Species)
)
View(full_panel_2)
full_panel_2 <-
expand.grid(
date = seq.POSIXt(min(some_dates$date),
max(some_dates$date),
by = "hour"),
species = unique(iris$Species)
)
better_panel <-
expand.grid(
date = seq.POSIXt(min(some_dates$date),
max(some_dates$date),
by = "hour"),
species = unique(iris$Species)
)
better_panel
install.packages("feather")
import(tidyverse)
library(tidyverse)
sf_trips <- read_csv('../raw_data/202201-baywheels-tripdata.csv')
setwd('upenn/22s/capstone/repo')
sf_trips <- read_csv('raw_data/202201-baywheels-tripdata.csv')
crs <- 'epsg:3857'
View(sf_trips)
dockless_end <-
sf_trips %>%
filter(is.na(end_station_id) & !is.na(end_lat))
View(dockless_end)
table(dockless_end$rideable_type)
dockless_end <-
sf_trips %>%
filter(is.na(end_station_id) & !is.na(end_lat) & rideable_type == "electric_bike")
dockless_end <-
sf_trips %>%
filter(is.na(end_station_id) & !is.na(end_lat) & rideable_type == "electric_bike") %>%
group_by(end_lng, end_lat) %>%
summarize(n = n())
View(sf_trips)
View(dockless_end)
dockless_end <-
sf_trips %>%
filter(is.na(end_station_id) & !is.na(end_lat) & rideable_type == 'electric_bike') %>%
group_by(end_lng, end_lat) %>%
summarize(n = n()) %>%
st_as_sf(coords = c('end_lng', 'end_lat'), crs = 'epsg:4326')
library(sf)
dockless_end <-
sf_trips %>%
filter(is.na(end_station_id) & !is.na(end_lat) & rideable_type == 'electric_bike') %>%
group_by(end_lng, end_lat) %>%
summarize(n = n()) %>%
st_as_sf(coords = c('end_lng', 'end_lat'), crs = 'epsg:4326')
ggplot() +
geom_sf(data = dockless_end)
library(tidyverse)
library(sf)
setwd('upenn/22s/capstone/repo')
dockless_bikes <- read_csv('raw_data/dockless_bike_data_2022-01-31.csv')
dockless_bikes <- read_csv('raw_data/dockless_bike_data_2022-01-31.csv')
dockless_bikes <- read_csv('raw_data/dockless_bike_data_2022-01-31.csv')
summarize(dockless_bikes)
glimpse(dockless_bikes)
bike_ids <-
dockless_bikes %>%
group_by(bike_id) %>%
summarize(n = n())
View(bike_ids)
bike_ids <-
dockless_bikes %>%
group_by(bike_id) %>%
summarize(
n = n(),
min_time = min(timestamp),
max_time = max(timestamp)
)
View(bike_ids)
View(bike_ids)
View(bike_ids)
bike_ids <-
dockless_bikes %>%
group_by(bike_id) %>%
summarize(
n = n(),
min_time = min(as.date(timestamp)),
max_time = max(as.date(timestamp))
)
glimpse(bike_ids)
library(lubridate)
View(dockless_bikes)
glimpse(bike_ids)
glimpse(dockless_bikes)
bike_ids <-
dockless_bikes %>%
group_by(bike_id) %>%
summarize(
n = n(),
min_time = seconds_to_period(min(timestamp)),
max_time = max(timestamp)
)
View(bike_ids)
bike_ids <-
dockless_bikes %>%
group_by(bike_id) %>%
summarize(
n = n(),
min_time = seconds_to_period(min(timestamp)),
max_time = seconds_to_period(max(timestamp))
)
View(bike_ids)
test_bike <- filter(dockless_bikes, bike_id == '0010c69c9e04b7bd9a4469e50322ed3f')
View(test_bike)
dc <-
st_read("https://opendata.arcgis.com/datasets/7241f6d500b44288ad983f0942b39663_10.geojson") %>%
dplyr::select(CITY_NAME, geometry)
View(test_bike)
test_bike <-
filter(dockless_bikes, bike_id == '0010c69c9e04b7bd9a4469e50322ed3f') %>%
dplyr::select(bike_id, lon, lat, timestamp) %>%
st_as_sf(coords = c('lon', 'lat'), crs = 'epsg:4326')
ggplot() +
geom_sf(dc) +
geom_sf(test_bike)
ggplot() +
geom_sf(data = dc) +
geom_sf(data = test_bike)
ggplot() +
#geom_sf(data = dc) +
geom_sf(data = test_bike)
ggplot() +
geom_sf(data = dc) +
geom_sf(data = test_bike)
View(bike_ids)
View(dc)
View(bike_ids)
test_bike <-
filter(dockless_bikes, bike_id == '002604d3123025e6e2fa8384ee72d2a6') %>%
dplyr::select(bike_id, lon, lat, timestamp) %>%
st_as_sf(coords = c('lon', 'lat'), crs = 'epsg:4326')
ggplot() +
geom_sf(data = dc) +
geom_sf(data = test_bike)
ggplot() +
# geom_sf(data = dc) +
geom_sf(data = test_bike)
ggplot() +
geom_sf(data = dc) +
geom_sf(data = test_bike)
ggplot() +
# geom_sf(data = dc) +
geom_sf(data = test_bike)
test_bike <-
filter(dockless_bikes, bike_id == '002604d3123025e6e2fa8384ee72d2a6') %>%
dplyr::select(bike_id, lon, lat, timestamp)
hist(test_bike, lon)
hist(test_bike$lon)
hist(test_bike$lat)
View(bike_ids)
test_bike <-
filter(dockless_bikes, bike_id == '004bb5329415c86f1b89550ee0a29d46') %>%
dplyr::select(bike_id, lon, lat, timestamp)
hist(test_bike$lon)
hist(test_bike$lat)
test_bike <-
filter(dockless_bikes, bike_id == '00721af7b7f60f93b41dc49c0674f9ab') %>%
dplyr::select(bike_id, lon, lat, timestamp) %>%
st_as_sf(coords = c('lon', 'lat'), crs = 'epsg:4326')
test_bike <-
filter(dockless_bikes, bike_id == '00721af7b7f60f93b41dc49c0674f9ab') %>%
dplyr::select(bike_id, lon, lat, timestamp)
hist(test_bike$lon)
hist(test_bike$lat)
dist_plot <- function(x) {
hist(x)                                   # Draw histogram
abline(v = mean(x),                       # Add line for mean
col = "red",
lwd = 3)
text(x = mean(x) * 1.7,                   # Add text for mean
y = mean(x) * 1.7,
paste("Mean =", mean(x)),
col = "red",
cex = 2)
}
test_bike <-
filter(dockless_bikes, bike_id == '002604d3123025e6e2fa8384ee72d2a6') %>%
dplyr::select(bike_id, lon, lat, timestamp)
dist_plot <- function(x) {
hist(x)                                   # Draw histogram
abline(v = mean(x),                       # Add line for mean
col = "red",
lwd = 3)
text(x = mean(x) * 1.7,                   # Add text for mean
y = mean(x) * 1.7,
paste("Mean =", mean(x)),
col = "red",
cex = 2)
}
dist_plot(test_bike$lon)
dist_plot(test_bike$lat)
test_bike <-
filter(dockless_bikes, bike_id == '002604d3123025e6e2fa8384ee72d2a6') %>%
dplyr::select(bike_id, lon, lat, timestamp)
dist_plot(test_bike$lon)
dist_plot(test_bike$lat)
test_bike <-
filter(dockless_bikes, bike_id == '002604d3123025e6e2fa8384ee72d2a6') %>%
dplyr::select(bike_id, lon, lat, timestamp)
dist_plot(test_bike$lon)
dist_plot(test_bike$lat)
View(dockless_bikes)
View(test_bike)
View(test_bike)
